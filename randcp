#!/usr/bin/ruby
# encoding: utf-8
require 'pry' # FIXME
require 'fileutils'

# The business
class RandCP
  def initialize
    abort 'randcp SOURCEDIR DESTDIR [NUMFILES] [FILETYPES]' if ARGV.size < 2
    @source    = ARGV.shift
    @dest      = ARGV.shift
    @num_files = ARGV.any? ? Integer(ARGV.shift) : 1
    @filetypes = ARGV
    abort 'Source directory does not exist'      unless File.directory? @source
    abort 'Destination directory does not exist' unless File.directory? @dest
    @source_files = FileCollection.new @source, @filetypes
    @dest_files   = FileCollection.new @dest,   @filetypes
  end

  def cp
    # Remove files already at dest from list of potential transfers
    @dest_files.files.each { |f| @source_files.ignore_file f }
    # Select random files from source and copy to dest
    @source_files.files.sample(@num_files).each do |f|
      @dest_files.add_file f
      @source_files.ignore_file f
    end
  end
end

# Our source or dest dir object
class FileCollection
  attr_reader :files, :path

  def initialize(path, filetypes)
    files = Dir.glob(path + '**/*').reject { |f| File.directory? f }
    # Filter out ones that don't match the filetypes
    if filetypes.any?
      files.select! do |f|
        filetypes.any? { |ft| /#{ Regexp.escape ft }$/i =~ f }
      end
    end
    @files = files
    @path  = path
  end

  # Removes the file from the list of potential transfers/checks
  def ignore_file(file)
    @files.reject! { |f| (File.basename f) == (File.basename file) }
  end

  # Adds the file to the dir and the transfer/check file list
  def add_file(file)
    FileUtils.cp file, @path, verbose: true
    @files << File.basename(file)
  end
end

RandCP.new.cp
